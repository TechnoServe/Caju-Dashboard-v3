# Generated by Django 4.2.5 on 2023-10-02 11:47

# TODO If I am a superuser in one country, I might not be a super user in another
# This condition is not covered in the current implementations?
# This might introduce another model that probably says UserCountry (fields has role),
# So you would be assigned a role based on the assigned country

import apps.authentication.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import phonenumber_field.modelfields

from django.db import transaction
import traceback


class SeedView:
    """For seeding data in the DB when migrations are run"""

    alias = ""

    def __init__(self, apps, alias):
        self.alias = alias
        self.RemRole: models.Model = apps.get_model("authentication", "RemRole")
        self.RemUser: models.Model = apps.get_model("authentication", "RemUser")
        self.RemOrganization: models.Model = apps.get_model(
            "authentication", "RemOrganization"
        )
        self.Country: models.Model = apps.get_model("dashboard", "Country")

    def seed_organizations(self):
        """Remove the TechnoServe organization thing"""

        # get roles
        non_profit_role = self.RemOrganization.objects.using(self.alias).get(
            organization_name="NON-PROFIT"
        )
        old_tns_role = self.RemOrganization.objects.using(self.alias).get(
            organization_name="TECHNOSERVE"
        )

        # update user's old roles to new roles
        self.RemUser.objects.using(self.alias).filter(organization=old_tns_role).update(
            organization=non_profit_role
        )

        # delete old org
        self.RemOrganization.objects.using(self.alias).filter(
            organization_name="TECHNOSERVE"
        ).delete()

    def seed_country(self):
        """Add Benin country to all users"""

        # get Benin country
        Benin_country = self.Country.objects.using(self.alias).get(country_name="Benin")

        # Add Benin as default country
        all_users = self.RemUser.objects.using(self.alias).all()
        for current_user in all_users:
            current_user.country_id.add(Benin_country)

    def seed_roles(self):
        """Seed changing the naming"""
        self.RemRole.objects.using(self.alias).filter(role_name="ADMIN").update(
            role_name="GLOBAL-ADMIN"
        )
        self.RemRole.objects.using(self.alias).filter(role_name="GOV-ADMIN").update(
            role_name="COUNTRY-ADMIN"
        )
        self.RemRole.objects.using(self.alias).filter(role_name="GOV-STAFF").update(
            role_name="SUPERUSER"
        )
        self.RemRole.objects.using(self.alias).filter(role_name="OTHER").update(
            role_name="NORMAL-USER"
        )

        # These roles should be replaced from the user with something like SUPERUSER e.t.c e.t.c
        # Or be replaced fromm the user or stay as they are
        # RemRole.objects.using(self.alias).get(role_name="ADMIN").pk

        try:
            # get roles
            super_role = self.RemRole.objects.using(self.alias).get(
                role_name="SUPERUSER"
            )
            old_tns_admin = self.RemRole.objects.using(self.alias).get(
                role_name="TNS-ADMIN"
            )
            old_tns_staff = self.RemRole.objects.using(self.alias).get(
                role_name="TNS-STAFF"
            )

            # update user's old roles to new roles
            self.RemUser.objects.using(self.alias).filter(role=old_tns_admin).update(
                role=super_role
            )
            self.RemUser.objects.using(self.alias).filter(role=old_tns_staff).update(
                role=super_role
            )

            # delete old roles
            self.RemRole.objects.using(self.alias).filter(
                role_name="TNS-ADMIN"
            ).delete()
            self.RemRole.objects.using(self.alias).filter(
                role_name="TNS-STAFF"
            ).delete()
        except:
            print("Could not migrate the TNS Roles")

        try:
            self.seed_organizations()
        except Exception as e:
            print("Could not migrate the TNS Organizations")
            # traceback.print_exc()
            # no need to reaise the issue
            # raise e

    def migrate(self):
        with transaction.atomic():
            if self.check_seed():
                return {"message": "Already seeded"}
            else:
                try:
                    self.seed_roles()
                    self.seed_country()
                    return {"message": "Seeded!"}
                except:
                    return {"message": "No users or roles yet!"}

    def check_seed(self):
        """
        obj: models.Model
        Returns whether a certain database table is seeded or not
        """
        roles = self.RemRole.objects.using(self.alias).filter(role_name="GLOBAL-ADMIN")
        return len(roles) > 0


def add_seed_data(apps, schema_editor):
    SeedView(apps=apps, alias=schema_editor.connection.alias).migrate()


class Migration(migrations.Migration):
    dependencies = [
        ("dashboard", "0009_beninyield_district_districtsatellite"),
        ("authentication", "0006_alter_remrole_role_name"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="remorganization",
            name="country_id",
        ),
        migrations.RemoveField(
            model_name="remorganization",
            name="domain",
        ),
        migrations.RemoveField(
            model_name="remrole",
            name="organization",
        ),
        migrations.RemoveField(
            model_name="remuser",
            name="sended_request",
        ),
        migrations.AddField(
            model_name="remuser",
            name="organization_name",
            field=models.CharField(max_length=250, null=True),
        ),
        migrations.AlterField(
            model_name="remrole",
            name="role_name",
            field=models.CharField(
                choices=[
                    ("GLOBAL-ADMIN", "Global Admin"),
                    ("COUNTRY-ADMIN", "Country Admin"),
                    ("SUPERUSER", "Superuser"),
                    ("NORMAL-USER", "Normal-User"),
                ],
                default="NORMAL-USER",
                max_length=200,
            ),
        ),
        migrations.RemoveField(
            model_name="remuser",
            name="country_id",
        ),
        migrations.CreateModel(
            name="RemUserAccessRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(max_length=150)),
                ("last_name", models.CharField(max_length=150)),
                ("email", models.EmailField(max_length=254)),
                (
                    "phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, max_length=17, region=None
                    ),
                ),
                ("organization_name", models.CharField(max_length=250)),
                ("reason", models.TextField(max_length=1000)),
                (
                    "status",
                    models.IntegerField(
                        choices=[(0, "Pending"), (1, "Approved"), (2, "Failed")],
                        default=0,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "country_id",
                    models.ManyToManyField(
                        default=apps.authentication.models.get_default_user_countries,
                        to="dashboard.country",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        default=apps.authentication.models.get_default_user_org,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="authentication.remorganization",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="remuser",
            name="country_id",
            field=models.ManyToManyField(
                default=apps.authentication.models.get_default_user_countries,
                to="dashboard.country",
            ),
        ),
        #
        # Modify the data
        migrations.RunPython(add_seed_data),
    ]
